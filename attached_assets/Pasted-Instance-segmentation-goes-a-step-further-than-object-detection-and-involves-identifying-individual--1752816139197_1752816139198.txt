Instance segmentation goes a step further than object detection and involves identifying individual objects in an image and segmenting them from the rest of the image.

The output of an instance segmentation model is a set of masks or contours that outline each object in the image, along with class labels and confidence scores for each object. Instance segmentation is useful when you need to know not only where objects are in an image, but also what their exact shape is.



Watch: Run Segmentation with Pre-Trained Ultralytics YOLO Model in Python.

Tip

YOLO11 Segment models use the -seg suffix, i.e. yolo11n-seg.pt and are pretrained on COCO.

Models
YOLO11 pretrained Segment models are shown here. Detect, Segment and Pose models are pretrained on the COCO dataset, while Classify models are pretrained on the ImageNet dataset.

Models download automatically from the latest Ultralytics release on first use.

Model	size
(pixels)	mAPbox
50-95	mAPmask
50-95	Speed
CPU ONNX
(ms)	Speed
T4 TensorRT10
(ms)	params
(M)	FLOPs
(B)
YOLO11n-seg	640	38.9	32.0	65.9 ± 1.1	1.8 ± 0.0	2.9	10.4
YOLO11s-seg	640	46.6	37.8	117.6 ± 4.9	2.9 ± 0.0	10.1	35.5
YOLO11m-seg	640	51.5	41.5	281.6 ± 1.2	6.3 ± 0.1	22.4	123.3
YOLO11l-seg	640	53.4	42.9	344.2 ± 3.2	7.8 ± 0.2	27.6	142.2
YOLO11x-seg	640	54.7	43.8	664.5 ± 3.2	15.8 ± 0.7	62.1	319.0
mAPval values are for single-model single-scale on COCO val2017 dataset.
Reproduce by yolo val segment data=coco.yaml device=0
Speed averaged over COCO val images using an Amazon EC2 P4d instance.
Reproduce by yolo val segment data=coco.yaml batch=1 device=0|cpu
Train
Train YOLO11n-seg on the COCO8-seg dataset for 100 epochs at image size 640. For a full list of available arguments see the Configuration page.

Example


Python
CLI

from ultralytics import YOLO

# Load a model
model = YOLO("yolo11n-seg.yaml")  # build a new model from YAML
model = YOLO("yolo11n-seg.pt")  # load a pretrained model (recommended for training)
model = YOLO("yolo11n-seg.yaml").load("yolo11n.pt")  # build from YAML and transfer weights

# Train the model
results = model.train(data="coco8-seg.yaml", epochs=100, imgsz=640)

Dataset format
YOLO segmentation dataset format can be found in detail in the Dataset Guide. To convert your existing dataset from other formats (like COCO etc.) to YOLO format, please use JSON2YOLO tool by Ultralytics.

Val
Validate trained YOLO11n-seg model accuracy on the COCO8-seg dataset. No arguments are needed as the model retains its training data and arguments as model attributes.

Example


Python
CLI

from ultralytics import YOLO

# Load a model
model = YOLO("yolo11n-seg.pt")  # load an official model
model = YOLO("path/to/best.pt")  # load a custom model

# Validate the model
metrics = model.val()  # no arguments needed, dataset and settings remembered
metrics.box.map  # map50-95(B)
metrics.box.map50  # map50(B)
metrics.box.map75  # map75(B)
metrics.box.maps  # a list contains map50-95(B) of each category
metrics.seg.map  # map50-95(M)
metrics.seg.map50  # map50(M)
metrics.seg.map75  # map75(M)
metrics.seg.maps  # a list contains map50-95(M) of each category

Predict
Use a trained YOLO11n-seg model to run predictions on images.

Example


Python
CLI

from ultralytics import YOLO

# Load a model
model = YOLO("yolo11n-seg.pt")  # load an official model
model = YOLO("path/to/best.pt")  # load a custom model

# Predict with the model
results = model("https://ultralytics.com/images/bus.jpg")  # predict on an image

# Access the results
for result in results:
    xy = result.masks.xy  # mask in polygon format
    xyn = result.masks.xyn  # normalized
    masks = result.masks.data  # mask in matrix format (num_objects x H x W)

See full predict mode details in the Predict page.

Export
Export a YOLO11n-seg model to a different format like ONNX, CoreML, etc.

Example


Python
CLI

from ultralytics import YOLO

# Load a model
model = YOLO("yolo11n-seg.pt")  # load an official model
model = YOLO("path/to/best.pt")  # load a custom trained model

# Export the model
model.export(format="onnx")

Available YOLO11-seg export formats are in the table below. You can export to any format using the format argument, i.e. format='onnx' or format='engine'. You can predict or validate directly on exported models, i.e. yolo predict model=yolo11n-seg.onnx. Usage examples are shown for your model after export completes.

Format	format Argument	Model	Metadata	Arguments
PyTorch	-	yolo11n-seg.pt	✅	-
TorchScript	torchscript	yolo11n-seg.torchscript	✅	imgsz, half, optimize, nms, batch, device
ONNX	onnx	yolo11n-seg.onnx	✅	imgsz, half, dynamic, simplify, opset, nms, batch, device
OpenVINO	openvino	yolo11n-seg_openvino_model/	✅	imgsz, half, dynamic, int8, nms, batch, data, fraction, device
TensorRT	engine	yolo11n-seg.engine	✅	imgsz, half, dynamic, simplify, workspace, int8, nms, batch, data, fraction, device
CoreML	coreml	yolo11n-seg.mlpackage	✅	imgsz, half, int8, nms, batch, device
TF SavedModel	saved_model	yolo11n-seg_saved_model/	✅	imgsz, keras, int8, nms, batch, device
TF GraphDef	pb	yolo11n-seg.pb	❌	imgsz, batch, device
TF Lite	tflite	yolo11n-seg.tflite	✅	imgsz, half, int8, nms, batch, data, fraction, device
TF Edge TPU	edgetpu	yolo11n-seg_edgetpu.tflite	✅	imgsz, device
TF.js	tfjs	yolo11n-seg_web_model/	✅	imgsz, half, int8, nms, batch, device
PaddlePaddle	paddle	yolo11n-seg_paddle_model/	✅	imgsz, batch, device
MNN	mnn	yolo11n-seg.mnn	✅	imgsz, batch, int8, half, device
NCNN	ncnn	yolo11n-seg_ncnn_model/	✅	imgsz, half, batch, device
IMX500	imx	yolo11n-seg_imx_model/	✅	imgsz, int8, data, fraction, device
RKNN	rknn	yolo11n-seg_rknn_model/	✅	imgsz, batch, name, device
See full export details in the Export page.

FAQ
How do I train a YOLO11 segmentation model on a custom dataset?
To train a YOLO11 segmentation model on a custom dataset, you first need to prepare your dataset in the YOLO segmentation format. You can use tools like JSON2YOLO to convert datasets from other formats. Once your dataset is ready, you can train the model using Python or CLI commands:

Example


Python
CLI

from ultralytics import YOLO

# Load a pretrained YOLO11 segment model
model = YOLO("yolo11n-seg.pt")

# Train the model
results = model.train(data="path/to/your_dataset.yaml", epochs=100, imgsz=640)

Check the Configuration page for more available arguments.

What is the difference between object detection and instance segmentation in YOLO11?
Object detection identifies and localizes objects within an image by drawing bounding boxes around them, whereas instance segmentation not only identifies the bounding boxes but also delineates the exact shape of each object. YOLO11 instance segmentation models provide masks or contours that outline each detected object, which is particularly useful for tasks where knowing the precise shape of objects is important, such as medical imaging or autonomous driving.

Why use YOLO11 for instance segmentation?
Ultralytics YOLO11 is a state-of-the-art model recognized for its high accuracy and real-time performance, making it ideal for instance segmentation tasks. YOLO11 Segment models come pretrained on the COCO dataset, ensuring robust performance across a variety of objects. Additionally, YOLO supports training, validation, prediction, and export functionalities with seamless integration, making it highly versatile for both research and industry applications.

How do I load and validate a pretrained YOLO segmentation model?
Loading and validating a pretrained YOLO segmentation model is straightforward. Here's how you can do it using both Python and CLI:

Example


Python
CLI

from ultralytics import YOLO

# Load a pretrained model
model = YOLO("yolo11n-seg.pt")

# Validate the model
metrics = model.val()
print("Mean Average Precision for boxes:", metrics.box.map)
print("Mean Average Precision for masks:", metrics.seg.map)

These steps will provide you with validation metrics like Mean Average Precision (mAP), crucial for assessing model performance.

How can I export a YOLO segmentation model to ONNX format?
Exporting a YOLO segmentation model to ONNX format is simple and can be done using Python or CLI commands:

Example


Python
CLI

from ultralytics import YOLO

# Load a pretrained model
model = YOLO("yolo11n-seg.pt")

# Export the model to ONNX format
model.export(format="onnx")