Object Detection
Object detection examples

Object detection is a task that involves identifying the location and class of objects in an image or video stream.

The output of an object detector is a set of bounding boxes that enclose the objects in the image, along with class labels and confidence scores for each box. Object detection is a good choice when you need to identify objects of interest in a scene, but don't need to know exactly where the object is or its exact shape.



Watch: Object Detection with Pre-trained Ultralytics YOLO Model.

Tip

YOLO11 Detect models are the default YOLO11 models, i.e. yolo11n.pt and are pretrained on COCO.

Models
YOLO11 pretrained Detect models are shown here. Detect, Segment and Pose models are pretrained on the COCO dataset, while Classify models are pretrained on the ImageNet dataset.

Models download automatically from the latest Ultralytics release on first use.

Model	size
(pixels)	mAPval
50-95	Speed
CPU ONNX
(ms)	Speed
T4 TensorRT10
(ms)	params
(M)	FLOPs
(B)
YOLO11n	640	39.5	56.1 ± 0.8	1.5 ± 0.0	2.6	6.5
YOLO11s	640	47.0	90.0 ± 1.2	2.5 ± 0.0	9.4	21.5
YOLO11m	640	51.5	183.2 ± 2.0	4.7 ± 0.1	20.1	68.0
YOLO11l	640	53.4	238.6 ± 1.4	6.2 ± 0.1	25.3	86.9
YOLO11x	640	54.7	462.8 ± 6.7	11.3 ± 0.2	56.9	194.9
mAPval values are for single-model single-scale on COCO val2017 dataset.
Reproduce by yolo val detect data=coco.yaml device=0
Speed averaged over COCO val images using an Amazon EC2 P4d instance.
Reproduce by yolo val detect data=coco.yaml batch=1 device=0|cpu
Train
Train YOLO11n on the COCO8 dataset for 100 epochs at image size 640. For a full list of available arguments see the Configuration page.

Example


Python
CLI

from ultralytics import YOLO

# Load a model
model = YOLO("yolo11n.yaml")  # build a new model from YAML
model = YOLO("yolo11n.pt")  # load a pretrained model (recommended for training)
model = YOLO("yolo11n.yaml").load("yolo11n.pt")  # build from YAML and transfer weights

# Train the model
results = model.train(data="coco8.yaml", epochs=100, imgsz=640)

Dataset format
YOLO detection dataset format can be found in detail in the Dataset Guide. To convert your existing dataset from other formats (like COCO etc.) to YOLO format, please use JSON2YOLO tool by Ultralytics.

Val
Validate trained YOLO11n model accuracy on the COCO8 dataset. No arguments are needed as the model retains its training data and arguments as model attributes.

Example


Python
CLI

from ultralytics import YOLO

# Load a model
model = YOLO("yolo11n.pt")  # load an official model
model = YOLO("path/to/best.pt")  # load a custom model

# Validate the model
metrics = model.val()  # no arguments needed, dataset and settings remembered
metrics.box.map  # map50-95
metrics.box.map50  # map50
metrics.box.map75  # map75
metrics.box.maps  # a list contains map50-95 of each category

Predict
Use a trained YOLO11n model to run predictions on images.

Example


Python
CLI

from ultralytics import YOLO

# Load a model
model = YOLO("yolo11n.pt")  # load an official model
model = YOLO("path/to/best.pt")  # load a custom model

# Predict with the model
results = model("https://ultralytics.com/images/bus.jpg")  # predict on an image

# Access the results
for result in results:
    xywh = result.boxes.xywh  # center-x, center-y, width, height
    xywhn = result.boxes.xywhn  # normalized
    xyxy = result.boxes.xyxy  # top-left-x, top-left-y, bottom-right-x, bottom-right-y
    xyxyn = result.boxes.xyxyn  # normalized
    names = [result.names[cls.item()] for cls in result.boxes.cls.int()]  # class name of each box
    confs = result.boxes.conf  # confidence score of each box

See full predict mode details in the Predict page.

Export
Export a YOLO11n model to a different format like ONNX, CoreML, etc.

Example


Python
CLI

from ultralytics import YOLO

# Load a model
model = YOLO("yolo11n.pt")  # load an official model
model = YOLO("path/to/best.pt")  # load a custom trained model

# Export the model
model.export(format="onnx")

Available YOLO11 export formats are in the table below. You can export to any format using the format argument, i.e. format='onnx' or format='engine'. You can predict or validate directly on exported models, i.e. yolo predict model=yolo11n.onnx. Usage examples are shown for your model after export completes.

Format	format Argument	Model	Metadata	Arguments
PyTorch	-	yolo11n.pt	✅	-
TorchScript	torchscript	yolo11n.torchscript	✅	imgsz, half, optimize, nms, batch, device
ONNX	onnx	yolo11n.onnx	✅	imgsz, half, dynamic, simplify, opset, nms, batch, device
OpenVINO	openvino	yolo11n_openvino_model/	✅	imgsz, half, dynamic, int8, nms, batch, data, fraction, device
TensorRT	engine	yolo11n.engine	✅	imgsz, half, dynamic, simplify, workspace, int8, nms, batch, data, fraction, device
CoreML	coreml	yolo11n.mlpackage	✅	imgsz, half, int8, nms, batch, device
TF SavedModel	saved_model	yolo11n_saved_model/	✅	imgsz, keras, int8, nms, batch, device
TF GraphDef	pb	yolo11n.pb	❌	imgsz, batch, device
TF Lite	tflite	yolo11n.tflite	✅	imgsz, half, int8, nms, batch, data, fraction, device
TF Edge TPU	edgetpu	yolo11n_edgetpu.tflite	✅	imgsz, device
TF.js	tfjs	yolo11n_web_model/	✅	imgsz, half, int8, nms, batch, device
PaddlePaddle	paddle	yolo11n_paddle_model/	✅	imgsz, batch, device
MNN	mnn	yolo11n.mnn	✅	imgsz, batch, int8, half, device
NCNN	ncnn	yolo11n_ncnn_model/	✅	imgsz, half, batch, device
IMX500	imx	yolo11n_imx_model/	✅	imgsz, int8, data, fraction, device
RKNN	rknn	yolo11n_rknn_model/	✅	imgsz, batch, name, device
See full export details in the Export page.

FAQ
How do I train a YOLO11 model on my custom dataset?
Training a YOLO11 model on a custom dataset involves a few steps:

Prepare the Dataset: Ensure your dataset is in the YOLO format. For guidance, refer to our Dataset Guide.
Load the Model: Use the Ultralytics YOLO library to load a pre-trained model or create a new model from a YAML file.
Train the Model: Execute the train method in Python or the yolo detect train command in CLI.
Example


Python
CLI

from ultralytics import YOLO

# Load a pretrained model
model = YOLO("yolo11n.pt")

# Train the model on your custom dataset
model.train(data="my_custom_dataset.yaml", epochs=100, imgsz=640)

For detailed configuration options, visit the Configuration page.

What pretrained models are available in YOLO11?
Ultralytics YOLO11 offers various pretrained models for object detection, segmentation, and pose estimation. These models are pretrained on the COCO dataset or ImageNet for classification tasks. Here are some of the available models:

YOLO11n
YOLO11s
YOLO11m
YOLO11l
YOLO11x
For a detailed list and performance metrics, refer to the Models section.

How can I validate the accuracy of my trained YOLO model?
To validate the accuracy of your trained YOLO11 model, you can use the .val() method in Python or the yolo detect val command in CLI. This will provide metrics like mAP50-95, mAP50, and more.

Example


Python
CLI

from ultralytics import YOLO

# Load the model
model = YOLO("path/to/best.pt")

# Validate the model
metrics = model.val()
print(metrics.box.map)  # mAP50-95

For more validation details, visit the Val page.

What formats can I export a YOLO11 model to?
Ultralytics YOLO11 allows exporting models to various formats such as ONNX, TensorRT, CoreML, and more to ensure compatibility across different platforms and devices.

Example


Python
CLI

from ultralytics import YOLO

# Load the model
model = YOLO("yolo11n.pt")

# Export the model to ONNX format
model.export(format="onnx")